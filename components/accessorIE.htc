<public:component>
    <script type="text/javascript" id="script">
        var hasOwnProperty = {}.hasOwnProperty,
            descriptors = {},
            unshadowedProperties = {},
            elements = {},
            container = script.parentNode,
            transport,
            transportName = "__transport__",
            prototype = null,
            obj = element;

        function get(name) {
            var descriptor = descriptors[name];

            if (hasOwnProperty.call(descriptor, "value")) {
                return descriptor.value;
            } else {
                return descriptor.get.call(obj);
            }
        }

        function set(name, value) {
            var descriptor = descriptors[name];

            if (hasOwnProperty.call(descriptor, "value")) {
                descriptor.value = value;
            } else {
                descriptor.set.call(obj, value);
            }
        }

        transport = {
            defineProperty: function (name, descriptor) {
                var element,
                    attribute;

                if (descriptors[name]) {
                    // May have changed type from property <-> method
                    unbindProperty(name);

                    for (attribute in descriptor) {
                        if (hasOwnProperty.call(descriptor, attribute)) {
                            descriptors[name][attribute] = descriptor[attribute];
                        }
                    }
                } else {
                    descriptors[name] = descriptor;
                }

                if (descriptor.value && typeof descriptor.value === "function") {
                    element = document.createElement("<public:method name='" + name + "' />");

                    script.text = "var " + name + " = descriptors['" + name + "'].value";
                } else {
                    element = document.createElement("<public:property name='" + name + "' get='get_" + name + "' put='set_" + name + "' />");

                    script.text = "function get_" + name + "() { return get('" + name + "'); } function set_" + name + "(value) { set('" + name + "', value); }";
                }

                elements[name] = element;

                container.insertBefore(element, script);
            },

            deleteProperty: function (name) {
                unbindProperty(name);
                delete descriptors[name];
            },

            getOwnPropertyDescriptor: function (name) {
                if (!descriptors[name] && hasOwnProperty.call(obj, name)) {
                    descriptors[name] = {
                        value: obj[name]
                    };
                }

                return descriptors[name];
            }
        };

        element[transportName] = transport;

        transport.defineProperty("__proto__", {
            get: function () {
                return prototype;
            },
            set: function (value) {
                deleteUnshadowedProperties();

                prototype = value;

                copyUnshadowedProperties(prototype);
            }
        });

        function copyUnshadowedProperties(prototype) {
            var name;

            for (name in prototype) {
                if (!transport.getOwnPropertyDescriptor(name)) {
                    unshadowedProperties[name] = true;

                    transport.defineProperty(name,
                        prototype[transportName] ?
                        prototype[transportName].getOwnPropertyDescriptor(name) : {
                            value: prototype[name]
                        }
                    );
                }
            }
        }

        function deleteUnshadowedProperties() {
            var name;

            for (name in unshadowedProperties) {
                transport.deleteProperty(name);
            }

            unshadowedProperties = {};
        }

        function unbindProperty(name) {
            container.removeChild(elements[name]);
        }
    </script>
</public:component>
